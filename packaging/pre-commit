#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ascii filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	echo "Error: Attempt to add a non-ascii file name."
	echo
	echo "This can cause problems if you want to work"
	echo "with people on other platforms."
	echo
	echo "To be portable it is advisable to rename the file ..."
	echo
	echo "If you know what you are doing you can disable this"
	echo "check using:"
	echo
	echo "  git config hooks.allownonascii true"
	echo
	exit 1
fi

# Files we will check in their entirety
git show :ChangeLog > /tmp/staged-ChangeLog.$$
git show :NEWS > /tmp/staged-NEWS.$$
git show :sbin/firehol.in > /tmp/staged-sbin-firehol.in$$

status=0

clogver=`sed -ne '1s/.*(\(.*\)).*/\1/p' /tmp/staged-ChangeLog.$$`
newsver=`head -n 10 /tmp/staged-NEWS.$$ | sed -ne 's/.*\<\([1-9][0-9]*\.[0-9][0-9]*[0-9A-Za-z.-]*\).*/\1/p' | head -n 1`

./packaging/check-log /tmp/staged-ChangeLog.$$
status=$?

if [ $status -eq 0 -a ! "$clogver" ]
then
  echo "Could not get version from ChangeLog"
  status=1
fi

if [ $status -eq 0 -a ! "$newsver" ]
then
  echo "Could not get version from NEWS"
  status=1
fi

if [ $status -eq 0 -a "$newsver" != "$clogver" ]
then
  echo "Version in NEWS ($newsver) differs from ChangeLog ($clogver)"
  status=1
fi

# Find commands that have been enclosed in quotes and remove anything after
#  if nothing matched the substitution, proceed to the next line
#  if the command is used in a -z check, proceed to the next line
#  if the command is in posix size check [ "$var" ], proceed to the next line
#  if the command is being assigned to a variable, proceed to the next line
#  if the command is being used in an eval, proceed to the next line
# Anything left, print the line number
sed -n -e 's/\("\$[^"}]*_CMD}\).*/\1/' \
       -e T \
       -e '/-z *"\$/b' \
       -e '/\[ *"\$/b' \
       -e '/= *"\$/b' \
       -e '/eval *"\$/b' \
       -e '{=}' \
       /tmp/staged-sbin-firehol.in$$ > /tmp/staged-sbin-firehol.problem-lines.$$
if [ -s /tmp/staged-sbin-firehol.problem-lines.$$ ]
then
  status=1
  echo 'Detected use(s) of "${SOMETHING_CMD}" in firehol.in. Check lines:'
  cat /tmp/staged-sbin-firehol.problem-lines.$$
fi

grep "^[YN]|" /tmp/staged-sbin-firehol.in$$ > /tmp/staged-sbin-firehol.cmd$$
for cmd in $(tr " " "\n" < /tmp/staged-sbin-firehol.in$$ |
             sed -n -e 's/.*\(\<[A-Z_]*_CMD\).*/\1/p' | sort | uniq)
do
  if ! grep -q "^[YN]|$cmd|" /tmp/staged-sbin-firehol.cmd$$
  then
    status=1
    echo "Missing definition of $cmd in firehol.in detection table."
  fi
done


rm -f /tmp/staged-*.$$

if [ $status -ne 0 ]
then
  exit $status
fi

# If there are whitespace errors, print the offending file names and fail.
#exec git diff-index --check --cached $against --
