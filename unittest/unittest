#!/bin/bash

haderror=""

if [ "`id -r -u`" != "0" ]
then
  echo "Must be root"
  echo ""
  haderror="Y"
fi

if [ ! -x tools/clean-iptables ]
then
  echo "Executable tools/clean-iptables script not found"
  echo ""
  haderror="Y"
fi

if [ ! -x ../sbin/iprange ]
then
  echo "Executable ../sbin/iprange program not found (was it built yet?)"
  echo ""
  haderror="Y"
fi

if [ "$1" = "-inns" ]
then
  mount -t tmpfs tmpfs /etc/firehol
  if [ -f /etc/firehol/firehol.conf \
    -o -f /etc/firehol/firehol-defaults.conf \
    -o -f /etc/firehol/fireqos.conf \
    -o -f /etc/firehol/link-balancer.conf \
    -o -d /etc/firehol/services ]
  then
    echo "Namespace switch failed! Aborting!"
    exit 1
  else
    echo "Running in separate namespace"
    ip link add veth0 type veth peer name veth1
    shift
  fi
elif [ ! "$haderror" ]
then
  echo "Unsharing namespaces"
  unshare -m -n -- $0 -inns "$@"
  exit
fi

if [ "$haderror" -o $# -lt 1 ]
then
  echo "Usage: sudo ./unittest all|test-dir|test-dir/test.conf [...]"
  exit 1
fi

if ! MYTMP="`mktemp -d -t firehol-unittest-XXXXXX`"
then
            echo >&2
            echo >&2
            echo >&2 "Cannot create temporary directory."
            echo >&2
            exit 1
fi

ETCSAVE=/etc/firehol.save$$

myexit() {
  rm -f /var/run/firehol.lck
  rm -rf $MYTMP
  exit 0
}

trap myexit INT
trap myexit HUP
trap myexit 0

TESTDIR=`pwd`/
export TESTDIR

if [ $# -eq 1 -a "$1" = "all" ]
then
  find firehol fireqos link-balancer vnetbuild -type f -name '*.conf' | sort > $MYTMP/all-tests
else
  find "$@" -type f -name '*.conf' | sort > $MYTMP/all-tests
fi

kcov=`which kcov 2> /dev/null`
if [ "$kcov" ]
then
  export kcov="$kcov coverage"
fi

newext() {
  echo "$2" | sed -e "s;\.conf$;.$1;"
}

clear_iptables() {
  test -d $MYTMP || exit 3
  cat > $MYTMP/reset <<-!
	*raw
	:PREROUTING ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	COMMIT
	*nat
	:PREROUTING ACCEPT [0:0]
	:INPUT ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	:POSTROUTING ACCEPT [0:0]
	COMMIT
	*mangle
	:PREROUTING ACCEPT [0:0]
	:INPUT ACCEPT [0:0]
	:FORWARD ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	:POSTROUTING ACCEPT [0:0]
	COMMIT
	*filter
	:INPUT ACCEPT [0:0]
	:FORWARD ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	COMMIT
	!
  iptables-restore < $MYTMP/reset
  st1=$?

  cat > $MYTMP/reset <<-!
	*raw
	:PREROUTING ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	COMMIT
	*nat
	:PREROUTING ACCEPT [0:0]
	:INPUT ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	:POSTROUTING ACCEPT [0:0]
	COMMIT
	*mangle
	:PREROUTING ACCEPT [0:0]
	:INPUT ACCEPT [0:0]
	:FORWARD ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	:POSTROUTING ACCEPT [0:0]
	COMMIT
	*filter
	:INPUT ACCEPT [0:0]
	:FORWARD ACCEPT [0:0]
	:OUTPUT ACCEPT [0:0]
	COMMIT
	!
  ip6tables-restore < $MYTMP/reset
  st2=$?
  rm -f /var/run/firehol.lck

  if [ $st1 -ne 0 -o  $st2 -ne 0 ]
  then
    exit 2
  fi
}

started=`date`
errors=0
total=0
while read conf
do
  export conf
  export pre_sh=$(newext pre.sh $conf)
  export run_sh=$(newext run.sh $conf)
  export post_sh=$(newext post.sh $conf)

  export runlog=$(newext log $conf)

  export out4=$(newext out4 $conf)
  export out6=$(newext out6 $conf)
  export aud4=$(newext aud4 $conf)
  export aud6=$(newext aud6 $conf)

  export outqdisc=$(newext qdisc.out $conf)
  export outclass=$(newext class.out $conf)
  export outfilter=$(newext filter.out $conf)
  export audqdisc=$(newext qdisc.aud $conf)
  export audclass=$(newext class.aud $conf)
  export audfilter=$(newext filter.aud $conf)

  export outrules=$(newext rules.out $conf)
  export outtable=$(newext table.out $conf)
  export audrules=$(newext rules.aud $conf)
  export audtable=$(newext table.aud $conf)

  case $conf in
    firehol*)
      clear_iptables
      program=firehol
    ;;
    fireqos*)
      program=fireqos
    ;;
    link-balancer*)
      program=link-balancer
    ;;
    vnetbuild*)
      program=vnetbuild
    ;;
    *)
      program=
    ;;
  esac

  if [ ! "$program" ]
  then
    echo "Cannot determine program for $conf"
  else
    script=../sbin/${program}.in
    export script
    total=$((total + 1))

    # Define our configuration directory exactly as we want it
    rm -rf /etc/firehol/*

    # Default special cases:
    #  - egrep because /sbin/egrep makes use of PATH to find 'grep -E'
    #    the unit tests set PATH to empty so we must use the explicit one
    #  - iprange because we want to test with the local version
    cat > /etc/firehol/firehol-defaults.conf <<-!
		EGREP_CMD='/bin/grep -E'
		IPRANGE_CMD='${TESTDIR}../sbin/iprange'
	!

    if [ -x "$pre_sh" ]
    then
      # We can control completely with a testname.pre.sh
      "$pre_sh" "$conf"
    else
      # Or just take the defaults
      mkdir -p /etc/firehol/services
    fi

    # Run the script
    if [ -x "$run_sh" ]
    then
      # We can control completely with a testname.pre.sh
      PATH= "$run_sh" "$conf" > "$runlog" 2>&1 < /dev/null
      status=$?
    else
      # Or just take the defaults
      case $program in
        firehol|fireqos|vnetbuild)
          PATH= $kcov "$script" "$conf" start > "$runlog" 2>&1 < /dev/null
          status=$?
        ;;
        link-balancer)
          cp "$conf" /etc/firehol/link-balancer.conf
          $kcov "$script" > "$runlog" 2>&1 < /dev/null
          status=$?
        ;;
      esac
    fi

    # If there are explicit post checks to be made, run them
    if [ $status -eq 0 -a -x "$post_sh" ]
    then
      "$post_sh" "$conf"
      status=$?
    fi

    # Compare running config to expected
    if [ $status -ne 0 ]
    then
      errors=$((errors + 1))
      echo "Unexpected run error - check $runlog"
    elif grep -q 'in: line [0-9]*:' "$runlog"
    then
      errors=$((errors + 1))
      echo "Unexpected runtime errors - check $runlog"
    else
      case $program in
        firehol)
          iptables-save > "$out4".raw
          ip6tables-save > "$out6".raw
          tools/clean-iptables "$out4".raw > "$out4"
          tools/clean-iptables "$out6".raw > "$out6"
          if ! cmp "$aud4" "$out4"
          then
            errors=$((errors + 1))
          elif ! cmp "$aud6" "$out6"
          then
            errors=$((errors + 1))
          fi
        ;;
        fireqos)
          tc qdisc show dev veth0 > "$outqdisc"
          tc class show dev veth0 > "$outclass".raw
          tc filter show dev veth0 > "$outfilter"
          tools/clean-class "$outclass".raw > "$outclass"
          if ! cmp "$audqdisc" "$outqdisc"
          then
            errors=$((errors + 1))
          elif ! cmp "$audclass" "$outclass"
          then
            errors=$((errors + 1))
          elif ! cmp "$audfilter" "$outfilter"
          then
            errors=$((errors + 1))
          fi
        ;;
        link-balancer)
          ip rule list > "$outrules"
          for n in $(ip rule list | sed -ne 's/.*lookup //p' | sort -n)
          do
            echo "===== TABLE $n ====="
            ip route list table $n
          done > "$outtable"
          if ! cmp "$audrules" "$outrules"
          then
            errors=$((errors + 1))
          elif ! cmp "$audtable" "$outtable"
          then
            errors=$((errors + 1))
          fi
        ;;
      esac
    fi
  fi

  if [ "${SUDO_USER}" ]
  then
    test -d "coverage" && chown -R "${SUDO_USER}" "coverage"
    test -f "$runlog" && chown -R "${SUDO_USER}" "$runlog"
    test -f "$out4" && chown -R "${SUDO_USER}" "$out4"
    test -f "$out6" && chown -R "${SUDO_USER}" "$out6"
    test -f "$aud4" && chown -R "${SUDO_USER}" "$aud4"
    test -f "$aud6" && chown -R "${SUDO_USER}" "$aud6"
  fi
done < $MYTMP/all-tests

echo " Started: $started"
echo "Finished: $(date)"
echo "   Tests: ${total}"
echo "  Errors: ${errors}"
