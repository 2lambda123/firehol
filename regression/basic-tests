#!/bin/bash

if [ "$1" != "-ok" ]
then
  echo "Do no run on a production system!"
  echo ""
  echo "This script will wreck your existing firewall, ultimately leaving"
  echo "it empty."
  echo ""
  echo "If you are running remotely your session will get interrupted"
  echo "Ensure you can re-establish control."
  echo ""
  echo "Re-run with '-ok' as a parameter to proceed"
  exit 1
fi

shift

if [ "`id -r -u`" != "0" ]
then
  echo "Must be root"
  notroot="Y"
fi

if [ "$notroot" -o $# -ne 1 ]
then
  echo "Usage: sudo ./basic-tests -ok current|git-version"
  exit 1
fi

if ! MYTMP="`mktemp -d -t firehol-regress-XXXXXX`"
then
            echo >&2
            echo >&2
            echo >&2 "Cannot create temporary directory."
            echo >&2
            exit 1
fi

ETCSAVE=/etc/firehol.save$$

myexit() {
  rm -rf $MYTMP
  test -d $ETCSAVE && rm -rf /etc/firehol && mv $ETCSAVE /etc/firehol
  exit 0
}

trap myexit SIGINT
trap myexit SIGHUP

case $1 in
  current)
   d=current
   (cd .. && cat sbin/firehol.in) > $MYTMP/fh-$d.in
  ;;
  *)
   d=$1
   (cd .. && git show $1:sbin/firehol.in) > $MYTMP/fh-$d.in 2> /dev/null
   test -s $MYTMP/fh-$d.in || (cd .. && git show $1:firehol.sh) > $MYTMP/fh-$d.in
   test -s $MYTMP/fh-$d.in || ( echo "Not in firehol/regression?"; exit 1 )
  ;;
esac

test -s $MYTMP/fh-$d.in || exit 1
chmod +x $MYTMP/fh-$d.in

have_ipv6="`grep IP6TABLES_CMD $MYTMP/fh-$d.in`"
if [ "$have_ipv6" ]
then
  ip6tables -t nat -L > /dev/null 2>&1
  if [ $? -eq 0 ]
  then # Have NAT
    all_accepts=24
    all_drops=16
  else
    all_accepts=20
    all_drops=16
  fi
else
  # NAT does not allow DROP, hence all_drops is lower
  all_accepts=12
  all_drops=8
fi

test -d /etc/firehol && mv /etc/firehol $ETCSAVE
mkdir -p /etc/firehol/services

$MYTMP/fh-$d.in stop || exit
$MYTMP/fh-$d.in status > $MYTMP/result || exit
drops=`grep DROP $MYTMP/result | wc -l`
accepts=`grep ACCEPT $MYTMP/result | wc -l`
echo "$d stop ... accepts=$accepts (want $all_accepts) drops=$drops (want 0)"
if [ $accepts -ne $all_accepts ]
then
  echo "ERROR: Status not functional! N.B. kernel version can have an effect"
  cat $MYTMP/result
  exit 1
fi
if [ $drops -ne 0 ]
then
  echo "ERROR: Firewall not stopped!"
  cat $MYTMP/result
  exit 1
fi

$MYTMP/fh-$d.in panic || exit
$MYTMP/fh-$d.in status > $MYTMP/result || exit
drops=`grep DROP $MYTMP/result | wc -l`
accepts=`grep ACCEPT $MYTMP/result | wc -l`
echo "$d panic ... accepts=$accepts drops=$drops"
if [ $accepts -ne $all_accepts ]
then
  echo "ERROR: Panic not functional!"
  exit 1
fi
if [ $drops -ne $all_drops ]
then
  echo "ERROR: Panic not complete!"
  exit 1
fi

$MYTMP/fh-$d.in stop

echo
echo "All seems OK"
myexit
