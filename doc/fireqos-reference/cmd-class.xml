<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!-- For license information see chapter-intro.xml -->
<refentry id="qos-class">

<refmeta>
<refentrytitle>traffic class: fireqos-class</refentrytitle>
<manvolnum>5</manvolnum>
</refmeta>

<refnamediv>
<refdescriptor>fireqos-class</refdescriptor>
<refname>fireqos-class</refname>
<refname>fireqos-class4</refname>
<refname>fireqos-class6</refname>
<refname>fireqos-class46</refname>
<refpurpose>define a traffic class</refpurpose>
</refnamediv>

<refsynopsisdiv>
  <cmdsynopsis>
    <command>class|class4|class6|class46</command>
    <arg choice="opt"><option>group</option></arg>
    <arg choice="plain"><replaceable>name</replaceable></arg>
    <arg choice="opt"><replaceable>optional-class-params</replaceable></arg>
  </cmdsynopsis>
  <cmdsynopsis>
    <command>class|class4|class6|class46</command>
    <arg choice="plain"><option>group</option></arg>
    <arg choice="plain"><option>end</option></arg>
  </cmdsynopsis>
</refsynopsisdiv>

<refsect1><title>Description</title>
  <para>
    There is also an optional <command>match</command> parameter
    called <command>class</command>; see <xref linkend="qos-match-params"/>.
  </para>

  <para>
    Writing <command>class</command> inherits the IPv4/IPv6 version
    from its enclosing interface (see <xref linkend="qos-interface"/>).
  </para>

  <para>
    Writing <command>class4</command> includes only IPv4 traffic in the class.
  </para>

  <para>
    Writing <command>class6</command> includes only IPv6 traffic in the class.
  </para>

  <para>
    Writing <command>class46</command> includes both IPv4 and IPv6
    traffic in the class.
  </para>

  <para>
    The actual traffic to be matched by a class is defined by adding
    matches. See <xref linkend="qos-match"/>.
  </para>

  <para>
     The sequence that classes appear in the configuration defines
     their priority. The first class is the most important one.
     Unless otherwise limited it will get all available bandwidth
     if it needs to.
  </para>

  <para>
    The second class is less important than the first, the third is even
    less important than the second, etc. The idea is very simple: just
    put the classes in the order of importance to you.
  </para>

  <para>
    Classes can have their priority assigned explicitly with the
    <option>prio</option> parameter. See <xref linkend="qos-class-params"/>.
  </para>

  <note><para>
     The underlying Linux qdisc used by FireQOS, HTB, supports only 8
     priorities, from 0 to 7. If you use more than 8 priorities, all
     after the 8th will get the same priority (<option>prio</option> 7).
  </para></note>

  <para>
    All classes in FireQOS share the <command>interface</command> bandwidth.
    However, every class has a <emphasis>committed</emphasis> rate
    (the minimum guaranteed speed it will get if it needs to) and
    a <emphasis>ceiling</emphasis> (the maximum rate this class can
    reach, provided there is capacity available and even if there is spare).
  </para>

  <para>
    Classes may be nested to any level by using the
    <command>class group</command> syntax.
  </para>

  <para>
    By default FireQOS creates nested classes as <emphasis>classes
    directly attached to their parent class</emphasis>. This way,
    nesting does not add any delays.
  </para>

  <para>
    FireQOS can also <emphasis>emulate new hardware</emphasis> at the
    <command>group class</command> level.
    This may be needed, when for example you have an ADSL router that
    you connect to via Ethernet: you want the LAN traffic to be at
    Ethernet speed, but WAN traffic at ADSL speed with proper ADSL
    overheads calculation.
  </para>

  <para>
    To accomplish hardware emulation nesting, you add a
    <option>linklayer</option> definition (<option>ethernet</option>,
    <option>adsl</option>, <option>atm</option>, etc.)
    or just an <option>mtu</option> to the <command>group class</command>.
    FireQOS will create a qdisc within the class, where the linklayer
    parameters will be assigned and the child classes will be attached
    to this qdisc. This adds some delay to the packets of the child
    classes, but allows you to emulate new hardware. For linklayer
    options, see <xref linkend="qos-class-params"/>.
  </para>

  <para>
    There is special class, called <option>default</option>.
    Default classes can be given explicitly in the configuration file.
    If they are not found in the config, FireQOS will append one at the
    end of each <command>interface</command> or
    <command>class group</command>.
  </para>

</refsect1>

<refsect1><title>Parameters</title>
  <variablelist>
    <varlistentry><term><option>group</option></term>
      <listitem>
        <para>
          It is possible to nest classes by using a group. Grouped classes
          must be closed with the <command>class group end</command>
          command.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term><replaceable>name</replaceable></term>
      <listitem>
        <para>
          This is a single-word name for this class and is used
          for displaying status information.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry><term><replaceable>optional-class-params</replaceable></term>
      <listitem>
        <para>
          The set of optional class parameters to apply to this class.
        </para>
        <para>
          The following optional class parameters are inherited from
          the <command>interface</command> the class is in:
          <simplelist>
             <member><option>ceil</option></member>
             <member><option>burst</option></member>
             <member><option>cburst</option></member>
             <member><option>quantum</option></member>
             <member><option>qdisc</option></member>
          </simplelist>
        </para>
        <para>
          If you define one of these at the interface level, then all
          classes within the interface will get the value by default.
          These values can be overwritten by defining the parameter
          on the class too.
        </para>
        <para>
          Optional class parameters not in the above list
          are <emphasis>not</emphasis> inherited from interfaces.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
</refsect1>

<refsect1><title>Examples</title>
  <para>
    To create a nested class, called servers, containing http and smtp:
    <programlisting>
interface eth0 lan input rate 1Gbit
  class voip commit 1Mbit
    match udp ports 5060,10000:10100

  class group servers commit 50%  # define the parent class
    match tcp                     # apply to all child classes

    class mail commit 50%         # 50% of parent ('servers')
      match port 25               # matches within parent ('servers')

    class web commit 50%
      match port 80
  class group end                 # end the group 'servers'

  class streaming commit 30%
    </programlisting>
  </para>

  <para>
    To create a nested class which emulates an ADSL modem:
    <programlisting>
interface eth0 lan output rate 1Gbit ethernet
   class lan
      match dst 192.168.0.0/24 # LAN traffic

   class group adsl rate 10Mbit ceil 10Mbit adsl remote pppoe-llc
      match all # all non-lan traffic in this emulated hardware group

      class voip # class within adsl
         match udp port 5060

      class web # class within adsl
         match tcp port 80,443
    class group end
    </programlisting>
  </para>
</refsect1>

<refsect1><title>See Also</title>
  <simplelist type="vert">
    <member><xref linkend="fireqos"/></member>
    <member><xref linkend="fireqos.conf"/></member>
    <member><xref linkend="qos-class-params"/></member>
    <member><xref linkend="qos-interface"/></member>
    <member><xref linkend="qos-match"/></member>
  </simplelist>
</refsect1>

</refentry>
